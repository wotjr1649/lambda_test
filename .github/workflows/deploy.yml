name: Deploy FastAPI to AWS Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Package FastAPI app
      run: |
        zip -r function.zip app lambda_function.py

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install -r requirements.txt
        deactivate

    - name: Package dependencies for AWS Lambda layer
      run: |
        mkdir python
        . venv/bin/activate
        pip install -r requirements.txt -t python
        deactivate
        zip -r dependencies.zip python
        rm -rf python

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Deploy FastAPI app to AWS Lambda
      run: |
        aws lambda update-function-code --function-name lambda-test2 --zip-file fileb://function.zip

    - name: Deploy dependencies to AWS Lambda layer
      run: |
        layer_version=$(aws lambda publish-layer-version --layer-name fastapi-dependencies --zip-file fileb://dependencies.zip --compatible-runtimes python3.11 --query 'LayerVersionArn' --output text) && \
        aws lambda update-function-configuration --function-name lambda-test2 --layers "$layer_version" "arn:aws:lambda:ap-northeast-2:770693421928:layer:Klayers-p311-fastapi:6" "arn:aws:lambda:ap-northeast-2:770693421928:layer:Klayers-p311-Pillow:4" "arn:aws:lambda:ap-northeast-2:770693421928:layer:Klayers-p311-pydantic:7"

    - name: Create or update API Gateway HTTP API
      run: |
        http_api_id=$(aws apigatewayv2 get-apis --query 'Items[?Name==`lambda-test2-http-api`].ApiId' --output text)
        if [ -z "$http_api_id" ]; then
          http_api_id=$(aws apigatewayv2 create-api --name lambda-test2-http-api --protocol-type HTTP --target $(aws lambda get-function --function-name lambda-test2 --query 'Configuration.FunctionArn' --output text) --query 'ApiId' --output text)
          aws apigatewayv2 create-route --api-id $http_api_id --route-key 'ANY /{proxy+}' --target "integrations/$(aws apigatewayv2 create-integration --api-id $http_api_id --integration-type AWS_PROXY --integration-uri arn:aws:apigateway:ap-northeast-2:lambda:path/2015-03-31/functions/$(aws lambda get-function --function-name lambda-test2 --query 'Configuration.FunctionArn' --output text)/invocations --payload-format-version 2.0 --query 'IntegrationId' --output text)"
          aws apigatewayv2 create-deployment --api-id $http_api_id --stage-name prod
        else
          aws apigatewayv2 update-api --api-id $http_api_id --name lambda-test2-http-api --protocol-type HTTP --target $(aws lambda get-function --function-name lambda-test2 --query 'Configuration.FunctionArn' --output text)
          aws apigatewayv2 create-deployment --api-id $http_api_id --stage-name prod
        fi
        aws lambda add-permission --function-name lambda-test2 --statement-id apigateway-test2 --action 'lambda:InvokeFunction' --principal apigateway.amazonaws.com --source-arn "arn:aws:execute-api:ap-northeast-2:*:$http_api_id/*/*/*"

