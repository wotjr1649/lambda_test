name: Build and Push Docker image to ECR

on:
  push:
    branches:
      - main-not

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: lets
  ECS_SERVICE: lets
  ECS_CLUSTER: lets-cluster
  ECS_TASK_DEFINITION: ./task-definition.json
  CONTAINER_NAME: lets     

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'

      - name: Install dependencies
        run: |
          python -m pip install --no-cache-dir --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::767397715593:role/lets_credentials_role
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg SERVER_SECRET_KEY=${{secrets.SERVER_SECRET_KEY}} \
            --build-arg KAKAO_CLIENT_ID=${{secrets.KAKAO_CLIENT_ID}} \
            --build-arg KAKAO_RESTAPI_KEY=${{secrets.KAKAO_RESTAPI_KEY}} \
            --build-arg NAVER_CLIENT_ID=${{secrets.NAVER_CLIENT_ID}} \
            --build-arg NAVER_SECRET_KEY=${{secrets.NAVER_SECRET_KEY}} \
            --build-arg DATABASE_HOST=${{secrets.DATABASE_HOST}} \
            --build-arg DATABASE_USER=${{secrets.DATABASE_USER}} \
            --build-arg DATABASE_PWD=${{secrets.DATABASE_PWD}} \
            --build-arg DATABASE_NAME=${{secrets.DATABASE_NAME}} \
            --build-arg BUSSINESS_SERVICE_KEY=${{secrets.BUSSINESS_SERVICE_KEY}} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
