name: Deploy with Docker

on:
  push:
    branches: [ main-not ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/lets_server_image
  VERSION: ${{ github.sha }}
  NAME: lets_server
  SERVER_SECRET_KEY: ${{ secrets.SERVER_SECRET_KEY }}
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  KAKAO_RESTAPI_KEY: ${{ secrets.KAKAO_RESTAPI_KEY }}
  NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
  NAVER_SECRET_KEY: ${{ secrets.NAVER_SECRET_KEY }}
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_USER: ${{ secrets.DATABASE_USER }}
  DATABASE_PWD: ${{ secrets.DATABASE_PWD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  BUSSINESS_SERVICE_KEY: ${{ secrets.BUSSINESS_SERVICE_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  REGION_NAME: ${{ secrets.REGION_NAME }}
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-lets ]

    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true
          docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
          docker run -dit -p 80:80 --name ${{ env.NAME }} \
          --env SERVER_SECRET_KEY=${{ secrets.SERVER_SECRET_KEY }} \
          --env KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
          --env KAKAO_RESTAPI_KEY=${{ secrets.KAKAO_RESTAPI_KEY }} \
          --env NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} \
          --env NAVER_SECRET_KEY=${{ secrets.NAVER_SECRET_KEY }} \
          --env DATABASE_HOST=${{ secrets.DATABASE_HOST }} \
          --env DATABASE_USER=${{ secrets.DATABASE_USER }} \
          --env DATABASE_PWD=${{ secrets.DATABASE_PWD }} \
          --env DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
          --env BUSSINESS_SERVICE_KEY=${{ secrets.BUSSINESS_SERVICE_KEY }} \
          --env AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          --env AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          --env REGION_NAME=${{ secrets.REGION_NAME }} \
          --env BUCKET_NAME=${{ secrets.BUCKET_NAME }} \
          --restart always ${{ env.DOCKER_IMAGE }}:latest
